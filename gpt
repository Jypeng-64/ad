import os
import cv2
import numpy as np
from PIL import Image
from torchvision import transforms

# 图像正则化函数
def normalize_image(img):
    # 将图像转换为灰度图
    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # 正则化图像
    img_norm = cv2.normalize(img_gray, None, 0, 255, cv2.NORM_MINMAX)

    # 将 NumPy 数组转换为灰度图像
    img_norm = np.uint8(img_norm)

    # 返回正则化后的图像
    return img_norm

# 将图像转换为二值图像
def convert_to_binary(img, file_path):
    # 将灰度图像二值化得到二值图像
    _, img_binary = cv2.threshold(img, 128, 1, cv2.THRESH_BINARY)

    # 保存二值图像到文件
    save_path = os.path.join(output_dir, os.path.relpath(file_path, input_dir)).replace('.tif', '.png').replace('.tiff', '.png')
    save_dir = os.path.dirname(save_path)
    os.makedirs(save_dir, exist_ok=True)

    # 将 NumPy 数组转换为 PIL 图像
    img_binary_pil = Image.fromarray(np.uint8(img_binary*255))

    # 保存 PIL 图像为 PNG 文件
    img_binary_pil.save(save_path)

    # 返回二值图像
    return img_binary

# 遍历目录树，找到所有的图像并转换为二值图像
def convert_images(input_dir, output_dir):
    for root, dirs, files in os.walk(input_dir):
        for filename in files:
            if filename.lower().endswith('.tif') or filename.lower().endswith('.tiff'):
                file_path = os.path.join(root, filename)
                img = cv2.imread(file_path, cv2.IMREAD_UNCHANGED)
                img_norm = normalize_image(img)
                img_binary = convert_to_binary(img_norm, file_path)
