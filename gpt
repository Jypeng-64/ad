import os
import cv2
import numpy as np
from PIL import Image
from torchvision import transforms

# 将图像转换为二值图像
def convert_to_binary(img):
    # 将图像转换为灰度图
    img_gray = img.convert('L')

    # 将灰度图转换为 PyTorch tensor
    to_tensor = transforms.ToTensor()
    img_tensor = to_tensor(img_gray)

    # 将 tensor 归一化到 [0, 1]
    normalize = transforms.Normalize((0.0,), (1.0,))
    img_norm = normalize(img_tensor)

    # 将 PyTorch tensor 转换为 NumPy 数组
    img_numpy = img_norm.numpy()

    # 将 NumPy 数组转换为灰度图像
    img_gray = np.uint8(img_numpy[0]*255)

    # 将灰度图像二值化得到二值图像
    _, img_binary = cv2.threshold(img_gray, 128, 1, cv2.THRESH_BINARY)

    # 保存二值图像到文件
    save_path = os.path.join(output_dir, os.path.relpath(file_path, input_dir))
    save_dir = os.path.dirname(save_path)
    os.makedirs(save_dir, exist_ok=True)
    cv2.imwrite(save_path, img_binary*255)

    # 返回二值图像
    return img_binary

# 遍历目录树，找到所有的图像并转换为二值图像
def convert_images(input_dir, output_dir):
    for root, dirs, files in os.walk(input_dir):
        for filename in files:
            if filename.lower().endswith('.jpg') or filename.lower().endswith('.png'):
                file_path = os.path.join(root, filename)
                img = Image.open(file_path)
                img_binary = convert_to_binary(img)

# 主函数
if __name__ == '__main__':
    # 输入图像所在文件夹路径
    input_dir = '/path/to/input/images'
    # 输出二值图像保存路径
    output_dir = '/path/to/output/images'
    # 将所有的图像转换为二值图像
    convert_images(input_dir, output_dir)
